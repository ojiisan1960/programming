     1                                  ; Source name     : TIMETEST.ASM
     2                                  ; Executable name : TIMETEST
     3                                  ; Version         : 1.0
     4                                  ; Created date    : 12/2/1999
     5                                  ; Last update     : 12/3/1999
     6                                  ; Author          : Jeff Duntemann
     7                                  ; Description     : A demo of time-related functions for Linux, using NASM 0.98
     8                                  ;
     9                                  ; Build using these commands:
    10                                  ;  nasm -f elf timetest.asm
    11                                  ;  gcc timetest.o -o timetest
    12                                  ;
    13                                  [SECTION .text]           ; Section containing code
    14                                  extern ctime
    15                                  extern getchar
    16                                  extern printf
    17                                  extern localtime
    18                                  extern time
    19                                  
    20                                  global main      ; Required so linker can find entry point
    21                                  main:
    22 00000000 55                          push ebp              ; Set up stack frame for debugger
    23 00000001 89E5                        mov ebp,esp
    24 00000003 53                          push ebx              ; Program must preserve ebp, ebx, esi, & edi
    25 00000004 56                          push esi
    26 00000005 57                          push edi
    27                                  ;;; Everything before this is boilerplate; use it for all ordinary apps!
    28                                  
    29                                  ;;; Generate a time_t calendar time value with clib's time function============
    30 00000006 6800000000                  push dword 0          ; Push a 32-bit null pointer to stack, since
    31                                                            ; we don't need a buffer. Time value is
    32                                                            ; returned in eax.
    33 0000000B E8(00000000)                call time             ; Returns calendar time in eax
    34 00000010 83C404                      add esp, byte 4       ; Clean up stack after call
    35 00000013 A3[00000000]                mov [oldtime],eax     ; Save time value in memory variable
    36                                  
    37                                  ;;; Generate a string summary of local time with clib's ctime function=========
    38 00000018 68[00000000]                push dword oldtime    ; Push address of calendar time value
    39 0000001D E8(00000000)                call ctime            ; Returns pointer to ASCII time string in eax
    40 00000022 83C404                      add esp, byte 4       ; Clean up stack after call
    41 00000025 50                          push eax              ; Push pointer to ASCII time string on stack
    42 00000026 68[00000000]                push dword timemsg    ; Push pointer to base message text string
    43 0000002B E8(00000000)                call printf           ; Merge and display the two strings
    44 00000030 83C408                      add esp, byte 8       ; Clean up stack after call
    45                                  
    46                                  ;;; Generate local time values into clib's static tm struct====================
    47 00000033 68[00000000]                push dword oldtime    ; Push address of calendar time value
    48 00000038 E8(00000000)                call localtime        ; Returns pointer to static time structure in eax
    49 0000003D 83C404                      add esp, byte 4       ; Clean up stack after call
    50                                  
    51                                  ;;; Make a local copy of clib's static tm struct===============================
    52 00000040 89C6                        mov esi, eax          ; Copy address of static tm from eax to esi
    53 00000042 BF[34000000]                mov edi, dword tmcopy ; Put the address of the local tm copy in edi
    54 00000047 B909000000                  mov ecx,9             ; A tm struct is 9 dwords in size under Linux
    55 0000004C FC                          cld                   ; Clear df to 0 so we move up-memory
    56 0000004D F3A5                        rep movsd             ; Copy static tm struct to local copy in .bss
    57                                  
    58                                  ;;; Display one of the fields in the tm structure==============================
    59 0000004F 8B15[48000000]              mov edx, dword [tmcopy+20] ; Year value is 20 bytes offset into tm
    60 00000055 52                          push edx              ; Push value onto the stack
    61 00000056 68[1F000000]                push dword yrmsg      ; Push address of the base string
    62 0000005B E8(00000000)                call printf           ; Display string and year value with printf
    63 00000060 83C408                      add esp, byte 8       ; Clean up the stack
    64                                  
    65                                  ;;; Wait a few seconds for user to press Enter so we have a time difference====
    66 00000063 E8(00000000)                call getchar
    67                                  
    68                                  ;;; Calculating seconds passed since program began running with difftime=======
    69 00000068 6800000000                  push dword 0          ; Push null ptr; we'll take value in eax
    70 0000006D E8(00000000)                call time             ; Get current time value; return in eax
    71 00000072 83C404                      add esp, byte 4       ; Clean up the stack
    72 00000075 A3[04000000]                mov [newtime],eax     ; Save new time value
    73 0000007A 2B05[00000000]              sub eax,[oldtime]     ; Calculate time difference value
    74 00000080 A3[08000000]                mov [timediff],eax    ; Save time difference value
    75 00000085 FF35[08000000]              push dword [timediff] ; Push difference in seconds onto the stack
    76 0000008B 68[32000000]                push dword elapsed     ; Push addr. of elapsed time message string
    77 00000090 E8(00000000)                call printf            ; Display elapsed time
    78 00000095 83C408                      add esp, byte 8        ; Clean up the stack
    79                                  
    80                                  ;;; Everything after this is boilerplate; use it for all ordinary apps!
    81 00000098 5F                          pop edi                ; Restore saved registers
    82 00000099 5E                          pop esi
    83 0000009A 5B                          pop ebx
    84 0000009B 89EC                        mov esp,ebp            ; Destroy stack frame before returning
    85 0000009D 5D                          pop ebp
    86 0000009E C3                          ret                    ; Return control to Linux
    87                                  
    88                                  [SECTION .data]            ; Section containing initialized data
    89 00000000 4865792C2077686174-     timemsg db "Hey, what time is it? It's %s",10,0
    90 00000009 2074696D6520697320-
    91 00000012 69743F204974277320-
    92 0000001B 25730A00           
    93 0000001F 546865207965617220-     yrmsg    db "The year is 19%d.",10,0
    94 00000028 697320313925642E0A-
    95 00000031 00                 
    96 00000032 4120746F74616C206F-     elapsed db "A total of %d seconds has elapsed since program began running.",10,0
    97 0000003B 66202564207365636F-
    98 00000044 6E6473206861732065-
    99 0000004D 6C6170736564207369-
   100 00000056 6E63652070726F6772-
   101 0000005F 616D20626567616E20-
   102 00000068 72756E6E696E672E0A-
   103 00000071 00                 
   104                                  
   105                                  [SECTION .bss]             ; Section containing uninitialized data
   106 00000000 <res 00000004>          oldtime   resd 1           ; Reserve 3 integers (doubles) for time values
   107 00000004 <res 00000004>          newtime   resd 1
   108 00000008 <res 00000004>          timediff  resd 1
   109 0000000C <res 00000028>          timestr   resb 40          ; Reserve 40 bytes for time string
   110 00000034 <res 00000024>          tmcopy    resd 9           ; Reserve 9 integer fields for time struct tm
