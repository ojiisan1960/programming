     1                                   ; Source name      : EATLINUX.ASM
     2                                   ; Executable name : EATLINUX
     3                                   ; Version          : 1.0
     4                                   ; Created date     : 11/12/1999
     5                                   ; Last update      : 11/22/1999
     6                                   ; Author           : Jeff Duntemann
     7                                   ; Description      : A simple program in assembly for Linux, using NASM 0.98,
     8                                   ;  demonstrating the use of the puts C library routine to display text.
     9                                   ;
    10                                   ; Build using these commands:
    11                                   ;  nasm -f elf eatlinux.asm
    12                                   ;  gcc eatlinux.o -o eatlinux
    13                                   ;
    14                                   [SECTION .text]          ; Section containing code
    15                                   extern puts
    16                                   global main              ; Required so linker can find entry point
    17                                   main:
    18 00000000 55                           push ebp             ; Set up stack frame for debugger
    19 00000001 89E5                         mov ebp,esp
    20 00000003 53                           push ebx             ; Program must preserve ebp, ebx, esi, & edi
    21 00000004 56                           push esi
    22 00000005 57                           push edi
    23                                       ;;; Everything before this is boilerplate; use it for all ordinary apps!
    24 00000006 68[00000000]                 push dword eatmsg    ; Push a 32-bit pointer to the message on the stack
    25 0000000B E8(00000000)                 call puts            ; Call the clib function for displaying strings
    26 00000010 81C404000000                 add esp, 4           ; Clean stack by adjusting esp back 4 bytes
    27                                       ;;;  Everything after this is boilerplate; use it for all ordinary apps!
    28 00000016 5F                           pop  edi             ; Restore saved registers
    29 00000017 5E                           pop  esi
    30 00000018 5B                           pop  ebx
    31 00000019 89EC                         mov  esp,ebp         ; Destroy stack frame before returning
    32 0000001B 5D                           pop  ebp
    33 0000001C C3                           ret                  ; Return control to Linux
    34                                  [SECTION .data]           ; Section containing initialized data
    35 00000000 456174206174204A6F-     eatmsg: db "Eat at Joe's!",10,0
    36 00000009 652773210A00       
    37                                  [SECTION .bss]            ; Section containing uninitialized data
